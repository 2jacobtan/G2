1956
flycheck_List.lhs-2015-03-20T06.06.11.lhs
(238, '10-27')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T06.06.11.lhs:238:10-27: Error: Liquid Type Mismatch', ' 238 | concat = foldr (append) Emp']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mG2: reduceCase: bad case passed in
Var (Id (Name "fs?" Nothing 16902 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848082 (Just (Span {start = Loc {line = 54, col = 1, file = "./liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T06.06.11.lhs"}, end = Loc {line = 56, col = 39, file = "./liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T06.06.11.lhs"}}))) (TyFun TYPE TYPE)) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848082 (Just (Span {start = Loc {line = 54, col = 1, file = "./liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T06.06.11.lhs"}, end = Loc {line = 56, col = 39, file = "./liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T06.06.11.lhs"}}))) (TyFun TYPE TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799666 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE))))
[]
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Execution/Rules.hs:623:17 in main:G2.Internals.Execution.Rules

time = 5.392221212387085

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 344,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T06.06.11.lhs:238:10-27: Error: Liquid Type Mismatch
 
 238 | concat = foldr (append) Emp
                ^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sizeNest ?a}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T06.06.11.lhs:240:24-47: Error: Liquid Type Mismatch
 
 240 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?d}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : (List (List Int)) | size ?g == 1 + size ?h
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?g
                                    && 0 <= size v}
      
     ?f : {?f : Int | ?f == (6 : int)}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?e
                                    && 0 <= size ?c}
      
     ?h : {?h : (List (List Int)) | size ?h == 1 + size ?c
                                    && 0 <= size ?h}
      
     ?e : {?e : (List (List Int)) | size ?e == 0
                                    && 0 <= size ?e}
      
     ?b : {?b : (List Int) | size ?b == sizeNest xss
                             && 0 <= size ?b}
      
     ?d : {?d : Bool | Prop ?d <=> ?a == ?f}
      
     ?a : {?a : Int | ?a >= 0
                      && ?a == size ?b}
