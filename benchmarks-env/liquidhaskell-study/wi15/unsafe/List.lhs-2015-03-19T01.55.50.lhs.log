LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 355,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.55.50.lhs:229:21-40: Error: Liquid Type Mismatch
 
 229 | concat (x :+: xs) = append x (concat xs)
                           ^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == size x + size ?a
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sizes ?b}
  
   In Context
     xs : {v : (List (List a)) | 0 <= size v}
      
     ?b : {?b : (List (List a)) | 0 <= size ?b}
      
     x : {v : (List a) | 0 <= size v}
      
     ?a : {?a : (List a) | size ?a == sizes xs
                           && 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.55.50.lhs:231:24-47: Error: Liquid Type Mismatch
 
 231 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?e}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : (List (List Int)) | size ?g == 1 + size ?c
                                    && sizes ?g == size List.l1 + size ?c
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?g
                                    && sizes v == size List.l0 + size ?g
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : (List Int) | size ?f == sizes xss
                             && 0 <= size ?f}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?d
                                    && sizes ?c == size List.l2 + size ?d
                                    && 0 <= size ?c}
      
     ?h : {?h : (List (List Int)) | size ?h == 0
                                    && sizes ?h == 0
                                    && 0 <= size ?h}
      
     ?e : {?e : Bool | Prop ?e <=> ?b == ?a}
      
     ?b : {?b : Int | ?b == size ?f}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?h
                                    && sizes ?d == size List.l3 + size ?h
                                    && 0 <= size ?d}
      
     ?a : {?a : Int | ?a == (6 : int)}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
