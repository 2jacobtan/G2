LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 256,Just 391,Just 382]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.32.11.lhs:225:38-56: Error: Liquid Type Mismatch
 
 225 | concat ((x :+: xs) :+: xss)  = x :+: concat (xs :+: xss)
                                            ^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List (List a)) | VV == ?c
                                  && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (List a)) | sizeXs VV > 0}
  
   In Context
     ?c : {?c : (List (List a)) | size ?c == 1 + size ?b
                                  && sizeXs ?c == size ?a + sizeXs ?b
                                  && 0 <= size ?c}
      
     ?b : {?b : (List (List a)) | 0 <= size ?b}
      
     ?a : {?a : (List a) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.32.11.lhs:230:33-42: Error: Liquid Type Mismatch
 
 230 | prop_concat2 = lAssert (length (concat yss) == 0)
                                       ^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List (List Int)) | VV == yss
                                    && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (List Int)) | sizeXs VV > 0}
  
   In Context
     yss : {yss : (List (List Int)) | size yss == 1 + size ?a
                                      && sizeXs yss == size List.l0 + sizeXs ?a
                                      && 0 <= size yss}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?b
                                    && sizeXs ?c == size List.l0 + sizeXs ?b
                                    && 0 <= size ?c}
      
     ?b : {?b : (List (List Int)) | size ?b == 0
                                    && sizeXs ?b == 0
                                    && 0 <= size ?b}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?c
                                    && sizeXs ?a == size List.l0 + sizeXs ?c
                                    && 0 <= size ?a}
