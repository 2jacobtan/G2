LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 422,Just 425,Just 252,Just 397]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-21T04.23.00.lhs:253:1-6: Error: Liquid Type Mismatch
 
 253 | concat ((:+:) Emp Emp) = Emp
       ^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == llsize ?b
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == llsize ?a}
  
   In Context
     ?b : {?b : (List (List a)) | 0 <= size ?b}
      
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-21T04.23.00.lhs:258:24-47: Error: Liquid Type Mismatch
 
 258 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?b}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : Int | ?g == (6 : int)}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?e
                                    && 0 <= size v}
      
     ?f : {?f : (List (List Int)) | size ?f == 0
                                    && 0 <= size ?f}
      
     ?c : {?c : (List Int) | size ?c == llsize xss
                             && 0 <= size ?c}
      
     ?h : {?h : Int | ?h == size ?c
                      && ?h >= 0}
      
     ?e : {?e : (List (List Int)) | size ?e == 1 + size ?a
                                    && 0 <= size ?e}
      
     ?b : {?b : Bool | Prop ?b <=> ?h == ?g}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?f
                                    && 0 <= size ?d}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?d
                                    && 0 <= size ?a}
