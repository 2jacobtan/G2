LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 308,Just 154,Just 395,Just 31]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-13T02.36.05.lhs:95:23-30: Error: Liquid Type Mismatch
 
 95 |         where (k,l) = head $ c
                            ^^^^^^^^
 
   Inferred type
     VV : {VV : [({v : Int | v /= k
                             && v <= k
                             && v < k
                             && 0 <= v
                             && v >= 0}, {v : (List Double) | size p == size v
                                                              && size v == n})] | VV == c
                                                                                  && VV >= c
                                                                                  && VV <= c
                                                                                  && len VV <= len c
                                                                                  && len VV >= len c
                                                                                  && len VV == len c
                                                                                  && len VV >= 0
                                                                                  && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [({v : Int | v /= k
                             && v <= k
                             && v < k
                             && 0 <= v
                             && v >= 0}, {v : (List Double) | size p == size v
                                                              && size v == n})] | len VV > 0}
  
   In Context
     p : {p : (List Double) | size p == n
                              && 0 <= size p}
      
     k : {k : Int | k >= 0}
      
     n : {n : Int | n >= 0}
      
     c : {c : [(Int, (List Double))] | len c >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-13T02.36.05.lhs:136:46-62: Error: Liquid Type Mismatch
 
 136 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)
                                                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | VV == p2
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == size p1}
  
   In Context
     p1 : {p1 : (List Double) | 0 <= size p1}
      
     p2 : {p2 : (List Double) | 0 <= size p2}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-13T02.36.05.lhs:150:30-42: Error: Liquid Type Mismatch
 
 150 | centroid n p sz = map (\x -> x `divide` sz) p
                                    ^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Int | VV == sz}
  
   not a subtype of Required type
     VV : {VV : Int | VV /= 0}
  
   In Context
     sz : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-13T02.36.05.lhs:188:21-41: Error: Liquid Type Mismatch
 
 188 | kmeans1 k n ps cs = normalize newClusters
                           ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}
