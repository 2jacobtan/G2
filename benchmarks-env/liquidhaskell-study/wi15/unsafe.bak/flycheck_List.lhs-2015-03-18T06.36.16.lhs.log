LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 252]
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-18T06.36.16.lhs:142:30-42
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-18T06.36.16.lhs:144:11
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-18T06.36.16.lhs:146:40-57
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-18T06.36.16.lhs:147:26-41
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-18T06.36.16.lhs:238:24-47: Error: Liquid Type Mismatch
 
 238 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?b}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Int | ?c == (6 : int)}
      
     ?e : {?e : (List Any) | size ?e == size2 ?a
                             && 0 <= size ?e}
      
     ?b : {?b : Bool | Prop ?b <=> ?d == ?c}
      
     ?d : {?d : Int | ?d == size ?e}
      
     ?a : {?a : (List (List Any)) | size2 ?a == 0
                                    && size ?a > 0
                                    && size ?a == size List.l1
                                    && size ?a == 1
                                    && 0 <= size ?a}
