LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 149,Just 150,Just 156]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-17T00.14.36.lhs:134:1-12: Error: Liquid Type Mismatch
 
 134 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)
       ^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Int | VV == ?a
                      && VV >= ?a
                      && VV <= ?a}
  
   not a subtype of Required type
     VV : {VV : Int | VV > 0}
  
   In Context
     n2 : Int
      
     n1 : Int
      
     ?a : {?a : Int | ?a == n1 + n2}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-17T00.14.36.lhs:134:46-62: Error: Liquid Type Mismatch
 
 134 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)
                                                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | VV == p2
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == size p1}
  
   In Context
     p1 : {p1 : (List Double) | 0 <= size p1}
      
     p2 : {p2 : (List Double) | 0 <= size p2}
