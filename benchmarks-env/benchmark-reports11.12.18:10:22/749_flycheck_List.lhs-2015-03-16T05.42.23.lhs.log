749
flycheck_List.lhs-2015-03-16T05.42.23.lhs
(243, '23-44')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T05.42.23.lhs:243:23-44: Error: Liquid Type Mismatch', ' 243 | concat (hd :+: tl)  = concat2 hd (concat tl) ']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat Emp = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = Emp
violating concat's refinement type
when
implies fs? fs? = False
Strengthen the refinement type of implies to eliminate this possibility
Abstract


ERROR:

9.720011949539185

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 355]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T05.42.23.lhs:243:23-44: Error: Liquid Type Mismatch
 
 243 | concat (hd :+: tl)  = concat2 hd (concat tl) 
                             ^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == size hd + size ?a
                           && (emptyL hd == 1 => size VV > 0)
                           && (emptyL ?a == 1 => size VV > 0)
                           && 0 <= size VV
                           && (emptyL VV == 1 <=> size VV > 0)}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == consize ?b
                           && (emptyLL ?b > 0 => size VV > 0)}
  
   In Context
     hd : {hd : (List a) | 0 <= size hd
                           && (emptyL hd == 1 <=> size hd > 0)}
      
     ?b : {?b : (List (List a)) | 0 <= size ?b
                                  && (emptyL ?b == 1 <=> size ?b > 0)}
      
     tl : {tl : (List (List a)) | 0 <= size tl
                                  && (emptyL tl == 1 <=> size tl > 0)}
      
     ?a : {?a : (List a) | size ?a == consize tl
                           && (emptyLL tl > 0 => size ?a > 0)
                           && 0 <= size ?a
                           && (emptyL ?a == 1 <=> size ?a > 0)}
