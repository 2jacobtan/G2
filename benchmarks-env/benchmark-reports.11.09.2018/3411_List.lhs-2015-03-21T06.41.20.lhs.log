3411
List.lhs-2015-03-21T06.41.20.lhs
(228, '22-29')
addList
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-21T06.41.20.lhs:228:22-29: Error: Liquid Type Mismatch', ' 228 | addList (h:+:t) l2 = add h l2']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0maddList (0 :+: (0 :+: Emp)) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: Emp))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: Emp)) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))) (0 :+: Emp) = 0 :+: (0 :+: Emp)
violating addList's refinement type
Concrete

addList (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))))))) Emp = 0 :+: Emp
makes a call to
addList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))))))))) Emp = 0 :+: Emp
violating addList's refinement type
Concrete


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 320,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-21T06.41.20.lhs:228:22-29: Error: Liquid Type Mismatch
 
 228 | addList (h:+:t) l2 = add h l2
                            ^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == 1 + size l2
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?a + size l2}
  
   In Context
     l2 : {l2 : (List a) | 0 <= size l2}
      
     ?a : {?a : (List a) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-21T06.41.20.lhs:230:24-47: Error: Liquid Type Mismatch
 
 230 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Bool | Prop ?c <=> ?a == ?d}
      
     ?b : {?b : (List Int) | 0 <= size ?b}
      
     ?d : {?d : Int | ?d == (6 : int)}
      
     ?a : {?a : Int | ?a == size ?b}
