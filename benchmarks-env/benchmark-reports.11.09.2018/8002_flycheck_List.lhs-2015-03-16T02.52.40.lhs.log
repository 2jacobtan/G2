8002
flycheck_List.lhs-2015-03-16T02.52.40.lhs
(225, '19-40')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:225:19-40: Error: Liquid Type Mismatch', ' 225 | concat (x:+:xs) = foldr (cons_list) x xs']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat Emp = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 362,Just 252]
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:142:30-42
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:144:11
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:146:40-57
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:147:26-41
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:225:19-40: Error: Liquid Type Mismatch
 
 225 | concat (x:+:xs) = foldr (cons_list) x xs
                         ^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size2 ?a
                           || size VV > 0}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T02.52.40.lhs:230:24-47: Error: Liquid Type Mismatch
 
 230 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?f}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : (List (List Int)) | size ?g == 1 + size ?e
                                    && size2 ?g == size List.l3 + size2 ?e
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?c
                                    && size2 v == size List.l0 + size2 ?c
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : Bool | Prop ?f <=> ?a == ?d}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?b
                                    && size2 ?c == size List.l1 + size2 ?b
                                    && 0 <= size ?c}
      
     ?h : {?h : (List Int) | size ?h == size2 xss
                             || size ?h > 0
                             && 0 <= size ?h}
      
     ?e : {?e : (List (List Int)) | size ?e == 0
                                    && size2 ?e == 0
                                    && 0 <= size ?e}
      
     ?b : {?b : (List (List Int)) | size ?b == 1 + size ?g
                                    && size2 ?b == size List.l2 + size2 ?g
                                    && 0 <= size ?b}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : Int | ?d == (6 : int)}
      
     ?a : {?a : Int | ?a == size ?h}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
