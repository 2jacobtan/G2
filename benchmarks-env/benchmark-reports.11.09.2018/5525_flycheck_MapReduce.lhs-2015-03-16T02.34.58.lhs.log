5525
flycheck_MapReduce.lhs-2015-03-16T02.34.58.lhs
(35, '13-28')
mapReduce
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T02.34.58.lhs:35:13-28: Error: Liquid Type Mismatch', ' 35 |     kvm   = collapse fr kvsm      ']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mmapReduce undefined undefined (0 :+: Emp) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: Emp)) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: Emp) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, 0 :+: Emp), (0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, 0 :+: Emp), (0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, 0 :+: Emp), (0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract

mapReduce undefined undefined (0 :+: (0 :+: Emp)) = error
makes a call to
collapse (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (fromList ([(0, 0 :+: Emp), (0, Emp)])) = fromList (map (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt))) (lh(,) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) \ds1 -> 
   case ds1 of
      (,) k1 v -> (k1, f v) ([(0, 0 :+: Emp), (0, Emp)]))
violating collapse's refinement type
when
group (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) kvs = fromList ([(0, 0 :+: Emp), (0, Emp)])
Strengthen the refinement type of group to eliminate this possibility
Abstract


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 2,Just 9,Just 12]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T02.34.58.lhs:33:25-26: Error: Liquid Type Mismatch
 
 33 |     kvs   = expand      fm xs     -- step 1
                              ^^
 
   Inferred type
     VV : {VV : (List (a, b)) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (a, b)) | size VV > 0}
  
   In Context


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T02.34.58.lhs:35:13-28: Error: Liquid Type Mismatch
 
 35 |     kvm   = collapse fr kvsm      -- step 3
                  ^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV
                           && 0 <= sizes VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV > 0}
  
   In Context


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T02.34.58.lhs:55:15-31: Error: Liquid Type Mismatch
 
 55 | expand f xs = concat (map f xs)
                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List (a, b)) | size VV == sizes ?a
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (a, b)) | size VV > 0}
  
   In Context
     xs : {v : (List a) | size v > 0
                          && 0 <= size v
                          && 0 <= sizes v}
      
     ?a : {?a : (List (List (a, b))) | size ?a == size xs
                                       && 0 <= size ?a
                                       && 0 <= sizes ?a}
