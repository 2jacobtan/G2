8116
List.lhs-2015-03-15T19.29.41.lhs
(231, '24-47')
prop_concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T19.29.41.lhs:231:24-47: Error: Liquid Type Mismatch', ' 231 | prop_concat = lAssert (length (concat xss) == 6)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:
G2: Unrecognized Data (DataCon (Name "$+" (Just "List") 0 (Just (Span {start = Loc {line = 57, col = 15, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 57, col = 31, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679075612 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679075612 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) TYPE)) (TyFun (TyApp (TyCon (Name "List" (Just "List") 8214565720323848140 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679075612 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) TYPE))) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848140 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679075612 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) TYPE))))))) with args [Var (Id (Name "fs?" Nothing 87682 Nothing) TYPE),Var (Id (Name "fs?" Nothing 87683 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848140 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyFun TYPE TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799724 Nothing) TYPE))),Var (Id (Name "fs?" Nothing 87684 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848140 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyFun TYPE TYPE)) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848140 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T19.29.41.lhs"}}))) (TyFun TYPE TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799724 Nothing) TYPE))))] in funcToSMT
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Solver/Converters.hs:360:17 in main:G2.Internals.Solver.Converters


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 252,Just 349]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T19.29.41.lhs:224:10-23: Error: Liquid Type Mismatch
 
 224 | concat = foldr addl Emp
                ^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == len ?a}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T19.29.41.lhs:231:24-47: Error: Liquid Type Mismatch
 
 231 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?h}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : (List (List Int)) | size ?g == 0
                                    && si ?g == 0
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?e
                                    && si v == size List.l0 + si ?e
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : Int | ?f == (6 : int)}
      
     ?c : {?c : Int | ?c == size ?b}
      
     ?h : {?h : Bool | Prop ?h <=> ?c == ?f}
      
     ?e : {?e : (List (List Int)) | size ?e == 1 + size ?d
                                    && si ?e == size List.l1 + si ?d
                                    && 0 <= size ?e}
      
     ?b : {?b : (List Int) | size ?b == len xss
                             && 0 <= size ?b}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?a
                                    && si ?d == size List.l2 + si ?a
                                    && 0 <= size ?d}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?g
                                    && si ?a == size List.l3 + si ?g
                                    && 0 <= size ?a}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
