9092
flycheck_List.lhs-2015-03-20T15.29.53.lhs
(196, '40-60')
zipWith
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T15.29.53.lhs:196:40-60: Error: Liquid Type Mismatch', ' 196 | zipWith f _          _          = die  "Bad call to zipWith"']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mzipWith undefined Emp (undefined :+: Emp) = error
makes a call to
die fs? = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: Emp) (0 :+: (undefined :+: Emp)) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: Emp)) (0 :+: (0 :+: (undefined :+: Emp))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: (0 :+: (undefined :+: Emp)))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp)))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp)))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp))))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (undefined :+: Emp)))))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: (0 :+: Emp)) (0 :+: Emp) = error
makes a call to
die ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith undefined (0 :+: Emp) Emp = error
makes a call to
die fs? = error
violating die's refinement type
Concrete


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 353,Just 361,Just 252,Just 349,Just 351]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T15.29.53.lhs:196:40-60: Error: Liquid Type Mismatch
 
 196 | zipWith f _          _          = die  "Bad call to zipWith"
                                              ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "Bad call to zipWith"
                        && strLen ?b == 19}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T15.29.53.lhs:219:1-6: Error: Liquid Type Mismatch
 
 219 | concat Emp = Emp
       ^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == 0
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?a + 1}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T15.29.53.lhs:220:22-32: Error: Liquid Type Mismatch
 
 220 | concat (x :+: xs) = (helper x xs)
                            ^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV > 0
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?a + 1}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T15.29.53.lhs:222:24-47: Error: Liquid Type Mismatch
 
 222 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?h}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : Int | ?g == (6 : int)}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?a
                                    && 0 <= size v}
      
     ?f : {?f : (List (List Int)) | size ?f == 1 + size ?b
                                    && 0 <= size ?f}
      
     ?c : {?c : (List Int) | size ?c == size xss + 1
                             && 0 <= size ?c}
      
     ?h : {?h : Bool | Prop ?h <=> ?d == ?g}
      
     ?e : {?e : (List (List Int)) | size ?e == 1 + size ?f
                                    && 0 <= size ?e}
      
     ?b : {?b : (List (List Int)) | size ?b == 0
                                    && 0 <= size ?b}
      
     ?d : {?d : Int | ?d == size ?c}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?e
                                    && 0 <= size ?a}
