124
flycheck_MapReduce.lhs-2015-03-16T03.06.31.lhs
(51, '15-31')
expand
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T03.06.31.lhs:51:15-31: Error: Liquid Type Mismatch', ' 51 | expand f xs = concat (map f xs)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:
G2: exprToSMT: unhandled Expr: Lam TermL (Id (Name "a" Nothing 7566047373982490711 (Just (Span {start = Loc {line = 54, col = 11, file = "./liquidhaskell-study/wi15/List.lhs"}, end = Loc {line = 54, col = 12, file = "./liquidhaskell-study/wi15/List.lhs"}}))) (TyApp (TyCon (Name "structEq" Nothing 0 Nothing) (TyFun TYPE TYPE)) (TyApp (TyApp (TyCon (Name "$" (Just "GHC.Tuple") 0 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))) (App (Data (DataCon (Name "structEq" Nothing 2 Nothing) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 7566047373982490709 Nothing) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 7566047373982490709 Nothing) TYPE)) (TyCon (Name "Bool" (Just "GHC.Types") 0 Nothing) TYPE))) (TyCon (Name "structEq" Nothing 0 Nothing) TYPE)))) (App (App (App (Var (Id (Name "structEqList" Nothing 0 Nothing) (TyCon (Name "structEq" Nothing 0 Nothing) TYPE))) (Type (TyApp (TyApp (TyCon (Name "$" (Just "GHC.Tuple") 0 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))) (Var (Id (Name "fs?" Nothing 87750 Nothing) (TyApp (TyCon (Name "lh" Nothing 0 Nothing) (TyApp TYPE TYPE)) (TyApp (TyApp (TyCon (Name "$" (Just "GHC.Tuple") 0 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))))) (Var (Id (Name "a" Nothing 7566047373982490711 (Just (Span {start = Loc {line = 54, col = 11, file = "./liquidhaskell-study/wi15/List.lhs"}, end = Loc {line = 54, col = 12, file = "./liquidhaskell-study/wi15/List.lhs"}}))) (TyApp (TyCon (Name "structEq" Nothing 0 Nothing) (TyFun TYPE TYPE)) (TyApp (TyApp (TyCon (Name "$" (Just "GHC.Tuple") 0 Nothing) (TyFun TYPE (TyFun TYPE TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323802121 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))))))
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Solver/Converters.hs:354:15 in main:G2.Internals.Solver.Converters


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 2,Just 10]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T03.06.31.lhs:31:13-28: Error: Liquid Type Mismatch
 
 31 |     kvm   = collapse fr kvsm      -- step 3
                  ^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV
                           && 0 <= sizes VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV > 0}
  
   In Context


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T03.06.31.lhs:51:15-31: Error: Liquid Type Mismatch
 
 51 | expand f xs = concat (map f xs)
                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List (a, b)) | size VV == sizes ?a
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (a, b)) | size xs == size VV}
  
   In Context
     xs : {v : (List a) | 0 <= size v
                          && 0 <= sizes v}
      
     ?a : {?a : (List (List (a, b))) | size ?a == size xs
                                       && 0 <= size ?a
                                       && 0 <= sizes ?a}
