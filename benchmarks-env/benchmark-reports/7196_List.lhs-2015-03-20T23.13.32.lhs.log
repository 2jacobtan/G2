7196
List.lhs-2015-03-20T23.13.32.lhs
(142, '17-50')
replicate
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:142:17-50: Error: Liquid Type Mismatch', ' 142 | replicate n x = foldl (\\a _ -> add x a) Emp [1..n]']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:
G2: appTypeOf
TyApp (TyCon (Name "List" (Just "List") 8214565720323848036 (Just (Span {start = Loc {line = 54, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 56, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) (TyApp TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679077292 (Just (Span {start = Loc {line = 41, col = 14, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 41, col = 32, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) TYPE))
[App (Data (DataCon (Name "Emp" (Just "List") 8214565720323848130 (Just (Span {start = Loc {line = 54, col = 15, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 54, col = 18, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679077043 (Just (Span {start = Loc {line = 54, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 54, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) TYPE)) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848036 (Just (Span {start = Loc {line = 54, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 56, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) (TyApp TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679077043 (Just (Span {start = Loc {line = 54, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 54, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) TYPE)))))) (Type (TyVar (Id (Name "a" Nothing 6989586621679077292 (Just (Span {start = Loc {line = 41, col = 14, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}, end = Loc {line = 41, col = 32, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-20T23.13.32.lhs"}}))) TYPE))),App (App (App (App (App (Var (Id (Name "enumFromTo" (Just "GHC.Enum") 8214565720323800213 Nothing) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE)) (TyFun (TyApp (TyCon (Name "lh" Nothing 0 Nothing) (TyApp TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE))) (TyFun (TyApp (TyCon (Name "Enum" (Just "GHC.Enum") 8214565720323800217 Nothing) (TyApp TYPE (TyCon (Name "Constraint" (Just "GHC.Types") 3674937295934324920 Nothing) TYPE))) (TyVar (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE))) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE)) (TyApp (TyCon (Name "[]" (Just "GHC.Types") 0 Nothing) (TyApp TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679076100 Nothing) TYPE)))))))))) (Type (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799621 Nothing) TYPE))) (Var (Id (Name "lhInt" (Just "GHC.Types") 0 Nothing) (TyApp (TyCon (Name "lh" Nothing 0 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799621 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE))))) (Var (Id (Name "$fEnumInt" (Just "GHC.Enum") 8214565720323800203 Nothing) (TyApp (TyCon (Name "Enum" (Just "GHC.Enum") 8214565720323800217 Nothing) (TyApp TYPE (TyCon (Name "Constraint" (Just "GHC.Types") 3674937295934324920 Nothing) TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799621 Nothing) TYPE))))) (App (Data (DataCon (Name "I#" (Just "GHC.Types") 8214565720323799620 (Just (Span {start = Loc {line = 17, col = 12, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) (TyFun TyLitInt (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799621 Nothing) TYPE)))) (Lit (LitInt 1)))) (Var (Id (Name "n" Nothing 6989586621679077062 Nothing) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799621 Nothing) TYPE)))]


CallStack (from HasCallStack):
  error, called at src/G2/Internals/Language/Typing.hs:188:20 in main:G2.Internals.Language.Typing


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 274,Just 354,Just 340,Just 283,Just 316,Just 252,Just 349,Just 350]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:142:17-50: Error: Liquid Type Mismatch
 
 142 | replicate n x = foldl (\a _ -> add x a) Emp [1..n]
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:164:26-55: Error: Liquid Type Mismatch
 
 164 | prop_map f xs = lAssert (length xs == length (map f xs))
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?d}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ?c : {?c : Int | ?c == size ?b}
      
     ?b : {?b : (List a) | 0 <= size ?b}
      
     ?d : {?d : Bool | Prop ?d <=> ?a == ?c}
      
     ?a : {?a : Int | ?a == size xs}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:176:28-63: Error: Liquid Type Mismatch
 
 176 | foldr1 op Emp        = die "Cannot call foldr1 with empty list"
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?b
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : [Char] | ?b ~~ ?a
                         && len ?b == strLen ?a
                         && len ?b >= 0}
      
     ?a : {?a : Addr# | ?a ~~ "Cannot call foldr1 with empty list"
                        && strLen ?a == 34}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:195:40-60: Error: Liquid Type Mismatch
 
 195 | zipWith f _          _          = die  "Bad call to zipWith"
                                              ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?b
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : [Char] | ?b ~~ ?a
                         && len ?b == strLen ?a
                         && len ?b >= 0}
      
     ?a : {?a : Addr# | ?a ~~ "Bad call to zipWith"
                        && strLen ?a == 19}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:198:28-50: Error: Liquid Type Mismatch
 
 198 | prop_zipWith xs = lAssert (length xs == length x2s)
                                  ^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ?c : {?c : Bool | Prop ?c <=> ?a == ?b}
      
     ?b : {?b : Int | ?b == size x2s}
      
     ?a : {?a : Int | ?a == size xs}
      
     x2s : {v : (List a) | 0 <= size v}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:214:16-23: Error: Liquid Type Mismatch
 
 214 | concat = fixme "concat"
                      ^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "concat"
                        && strLen ?b == 6}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-20T23.13.32.lhs:216:24-47: Error: Liquid Type Mismatch
 
 216 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?a}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Int | ?c == size ?b}
      
     ?b : {?b : (List Int) | 0 <= size ?b}
      
     ?d : {?d : Int | ?d == (6 : int)}
      
     ?a : {?a : Bool | Prop ?a <=> ?c == ?d}
