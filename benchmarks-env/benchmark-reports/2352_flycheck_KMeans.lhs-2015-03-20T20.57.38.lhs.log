2352
flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs
(186, '21-41')
kmeans1
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs:186:21-41: Error: Liquid Type Mismatch', ' 186 | kmeans1 k n ps cs = normalize newClusters']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mThe call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 1 Emp (fromList []) = fromList ([(0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([((-1), Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 1 Emp (fromList []) = fromList ([(0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([(0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 1 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 2 (((0.0) :+: ((0.0) :+: Emp)) :+: Emp) (fromList []) = fromList ([((-1), Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([((-1), Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 1 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: (Emp :+: Emp)) (fromList []) = fromList ([((-1), Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([(0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 1 1 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 2 (((0.0) :+: ((0.0) :+: Emp)) :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp), (0, (0.0) :+: Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: ((0.0) :+: Emp)), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: Emp))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, Emp), (0, Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), Emp), (0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp))), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 0 Emp (fromList []) = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([(0, Emp), (0, Emp), (0, Emp), (0, Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
violates kmeans1's refinement type
when
map fs? fs? (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? newClusters = fromList ([((-1), (0.0) :+: Emp), (0, Emp)])
Strengthen the refinement type of map to eliminate this possibility
Abstract

Timeout!

time = 120.30036115646362

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 149,Just 151,Just 154,Just 31]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs:134:1-12: Error: Liquid Type Mismatch
 
 134 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)
       ^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | VV == ?a
                                && VV >= ?a
                                && VV <= ?a
                                && size VV == n
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n * 2}
  
   In Context
     n : {n : Int | n >= 0}
      
     p1 : {p1 : (List Double) | size p1 == n
                                && 0 <= size p1}
      
     ?a : {?a : (List Double) | size ?a == size p1
                                && 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs:186:21-41: Error: Liquid Type Mismatch
 
 186 | kmeans1 k n ps cs = normalize newClusters
                           ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs:192:21-38: Error: Liquid Type Mismatch
 
 192 |     fr wp1 wp2    = mergeCluster n wp1 wp2
                           ^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-20T20.57.38.lhs:192:21-42: Error: Liquid Type Mismatch
 
 192 |     fr wp1 wp2    = mergeCluster n wp1 wp2
                           ^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}
