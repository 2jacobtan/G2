372
flycheck_List.lhs-2015-03-16T04.20.46.lhs
(225, '1-6')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:225:1-6: Error: Liquid Type Mismatch', ' 225 | concat (x:+:Emp) = cons_list x Emp']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat (Emp :+: Emp) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat Emp = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: Emp) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: Emp)) :+: Emp) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: (Emp :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 384,Just 400,Just 377]
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:142:30-42
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:144:11
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:146:40-57
WARNING: Found false in /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:147:26-41
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:225:1-6: Error: Liquid Type Mismatch
 
 225 | concat (x:+:Emp) = cons_list x Emp
       ^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV > 0
                           && size VV > 1
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size2 ?a
                           && size VV > 0}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:225:20-34: Error: Liquid Type Mismatch
 
 225 | concat (x:+:Emp) = cons_list x Emp
                          ^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV > 1
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size2 ?a
                           && size VV > 0}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.20.46.lhs:230:1-9: Error: Liquid Type Mismatch
 
 230 | cons_list Emp (y:+:Emp) = (y:+:Emp)
       ^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == 1 + size ?a
                           && size2 VV == size y + size2 ?a
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV > 1}
  
   In Context
     ?a : {?a : (List a) | size ?a == 0
                           && size2 ?a == 0
                           && 0 <= size ?a}
      
     y : a
