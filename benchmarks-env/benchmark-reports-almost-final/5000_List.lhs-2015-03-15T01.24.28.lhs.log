5000
List.lhs-2015-03-15T01.24.28.lhs
(215, '23-38')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T01.24.28.lhs:215:23-38: Error: Liquid Type Mismatch', ' 215 | concat ((:+:) x xs) = foldr (+:+) x xs']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat Emp = error
makes a call to
patError = undefined
violating patError's refinement type
Concrete

concat (Emp :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = Emp
violating concat's refinement type
Concrete


time = 16.794254779815674

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 348,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T01.24.28.lhs:215:23-38: Error: Liquid Type Mismatch
 
 215 | concat ((:+:) x xs) = foldr (+:+) x xs
                             ^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?a}
  
   In Context
     ?a : {?a : (List (List a)) | nestedSize ?a >= 0
                                  && 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T01.24.28.lhs:233:24-47: Error: Liquid Type Mismatch
 
 233 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?g}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : Bool | Prop ?g <=> ?b == ?e}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?d
                                    && nestedSize v == size List.l0 + nestedSize ?d
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : (List (List Int)) | size ?f == 0
                                    && nestedSize ?f == 0
                                    && 0 <= size ?f}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?h
                                    && nestedSize ?c == size List.l2 + nestedSize ?h
                                    && 0 <= size ?c}
      
     ?h : {?h : (List (List Int)) | size ?h == 1 + size ?f
                                    && nestedSize ?h == size List.l3 + nestedSize ?f
                                    && 0 <= size ?h}
      
     ?e : {?e : Int | ?e == (6 : int)}
      
     ?b : {?b : Int | ?b >= 0
                      && ?b == size ?a}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?c
                                    && nestedSize ?d == size List.l1 + nestedSize ?c
                                    && 0 <= size ?d}
      
     ?a : {?a : (List Int) | size ?a == size xss
                             && 0 <= size ?a}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
