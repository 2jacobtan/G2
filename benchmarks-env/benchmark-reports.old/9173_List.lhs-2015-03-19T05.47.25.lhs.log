9173
List.lhs-2015-03-19T05.47.25.lhs
(230, '15-78')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.47.25.lhs:230:15-78: Error: Liquid Type Mismatch', ' 230 | concat lsts = reverseList $ concatRec (reverseList (map reverseList lsts)) Emp']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:

liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.47.25.lhs:55:32: warning: [-Wtabs]
    Tab character found here, and in 21 further locations.
    Please use spaces instead.

liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.47.25.lhs:55:32: warning: [-Wtabs]
    Tab character found here, and in 21 further locations.
    Please use spaces instead.
G2: ERROR OCCURRED IN LIQUIDHASKELL
[/home/mbland/G2_Root/G2/benchmarks-env/liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.47.25.lhs:54:15-17: Error: Illegal type specification for `constructor List.Emp`
    constructor List.Emp :: {VV : (List a) | sizeOfConcat VV == 0
                                             && size VV == 0}
    Sort Error in Refinement: {VV : (List.List a_a1X1) | (sizeOfConcat VV == 0
                                                          && size VV == 0)}
    Cannot unify (List.List @(42)) with a_a1X1 in expression: sizeOfConcat VV,/home/mbland/G2_Root/G2/benchmarks-env/liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.47.25.lhs:55:15-30: Error: Illegal type specification for `constructor List.:+:`
    constructor List.:+: :: x:a -> xs:(List a) -> {VV : (List a) | sizeOfConcat VV == size x + sizeOfConcat xs
                                                                   && size VV == 1 + size xs}
    Sort Error in Refinement: {VV : (List.List a_a1X1) | (sizeOfConcat VV == size x + sizeOfConcat xs
                                                          && size VV == 1 + size xs)}
    Cannot unify (List.List @(42)) with a_a1X1 in expression: sizeOfConcat VV]
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Liquid/Interface.hs:77:29 in main:G2.Internals.Liquid.Interface


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 330]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.47.25.lhs:230:15-78: Error: Liquid Type Mismatch
 
 230 | concat lsts = reverseList $ concatRec (reverseList (map reverseList lsts)) Emp
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == sizeOfConcat ?a + size ?c
                           && size VV == sizeOfConcat ?a
                           && size VV == size ?d + size ?c
                           && size VV == size ?c + size ?d
                           && size VV == size ?d
                           && 0 <= size VV
                           && 0 <= sizeOfConcat VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sizeOfConcat lsts}
  
   In Context
     ?c : {?c : (List a) | size ?c == 0
                           && sizeOfConcat ?c == 0
                           && 0 <= size ?c
                           && 0 <= sizeOfConcat ?c}
      
     ?b : {?b : (List (List a)) | size ?b == size lsts
                                  && 0 <= size ?b
                                  && 0 <= sizeOfConcat ?b}
      
     lsts : {lsts : (List (List a)) | 0 <= size lsts
                                      && 0 <= sizeOfConcat lsts}
      
     ?d : {?d : (List a) | size ?d == sizeOfConcat ?a + size ?c
                           && 0 <= size ?d
                           && 0 <= sizeOfConcat ?d}
      
     ?a : {?a : (List (List a)) | size ?a == size ?b
                                  && 0 <= size ?a
                                  && 0 <= sizeOfConcat ?a}
