10687
List.lhs-2015-03-17T13.13.11.lhs
(231, '21-41')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-17T13.13.11.lhs:231:21-41: Error: Liquid Type Mismatch', ' 231 | concat (x :+: xs) = concat2 x (concat xs) ']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:
G2: ERROR OCCURRED IN LIQUIDHASKELL
[/home/mbland/G2_Root/G2/benchmarks-env/liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-17T13.13.11.lhs:55:15-30: Error: Illegal type specification for `constructor List.:+:`
    constructor List.:+: :: x:a -> xs:(List a) -> {VV : (List a) | sizeList VV == size x + sizeList xs
                                                                   && size VV == 1 + size xs}
    Sort Error in Refinement: {VV : (List.List a_a1WT) | (sizeList VV == size x + sizeList xs
                                                          && size VV == 1 + size xs)}
    Cannot unify (List.List @(42)) with a_a1WT in expression: sizeList VV,/home/mbland/G2_Root/G2/benchmarks-env/liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-17T13.13.11.lhs:54:15-17: Error: Illegal type specification for `constructor List.Emp`
    constructor List.Emp :: {VV : (List a) | sizeList VV == 0
                                             && size VV == 0}
    Sort Error in Refinement: {VV : (List.List a_a1WT) | (sizeList VV == 0
                                                          && size VV == 0)}
    Cannot unify (List.List @(42)) with a_a1WT in expression: sizeList VV]
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Liquid/Interface.hs:77:29 in main:G2.Internals.Liquid.Interface


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 336,Just 355,Just 328]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-17T13.13.11.lhs:224:1-7: Error: Liquid Type Mismatch
 
 224 | concat2 Emp Emp = Emp
       ^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == 1 + size ?c
                           && size VV == 1 + size ?d
                           && size VV >= 1
                           && VV /= ?b
                           && VV /= ?c
                           && VV /= ?d
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?c}
  
   In Context
     ?c : {?c : (List a) | 0 <= size ?c}
      
     ?b : {?b : (List a) | 0 <= size ?b}
      
     ?d : {?d : (List a) | ?d == ?c
                           && 0 <= size ?d
                           && size ?d == 1 + size ?b
                           && sizeList ?d == size ?a + sizeList ?b
                           && ?d == List.:+: ?a ?b
                           && size ?d == 1 + size ?b
                           && sizeList ?d == size ?a + sizeList ?b
                           && 0 <= size ?d}
      
     ?a : a


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-17T13.13.11.lhs:231:21-41: Error: Liquid Type Mismatch
 
 231 | concat (x :+: xs) = concat2 x (concat xs) 
                           ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == size x
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sizeList ?a}
  
   In Context
     x : {v : (List a) | 0 <= size v}
      
     ?a : {?a : (List (List a)) | 0 <= size ?a}
