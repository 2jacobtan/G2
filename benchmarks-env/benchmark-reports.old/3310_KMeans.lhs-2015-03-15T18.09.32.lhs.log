3310
KMeans.lhs-2015-03-15T18.09.32.lhs
(166, '23-51')
kmeans
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T18.09.32.lhs:166:23-51: Error: Liquid Type Mismatch', ' 166 | kmeans steps k n ps = repeat steps (kmeans1 k n ps)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mkmeans 1 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (fromList []) = error
violating kmeans1's refinement type
Concrete

kmeans 2 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (fromList [])) = error
violating kmeans1's refinement type
Concrete

kmeans 3 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (fromList []))) = error
violating kmeans1's refinement type
Concrete

kmeans 4 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (fromList [])))) = error
violating kmeans1's refinement type
Concrete

kmeans 5 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (fromList []))))) = error
violating kmeans1's refinement type
Concrete

kmeans 6 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (fromList [])))))) = error
violating kmeans1's refinement type
Concrete

kmeans 7 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (fromList []))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 8 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (f (fromList [])))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 9 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (f (f (fromList []))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 10 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (f (f (f (fromList [])))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 11 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (f (f (f (f (fromList []))))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 12 1 0 Emp (fromList []) = error
makes a call to
kmeans1 1 0 Emp (f (f (f (f (f (f (f (f (f (f (f (fromList [])))))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 1 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (fromList []) = error
violating kmeans1's refinement type
Concrete

kmeans 2 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (fromList [])) = error
violating kmeans1's refinement type
Concrete

kmeans 3 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (fromList []))) = error
violating kmeans1's refinement type
Concrete

kmeans 4 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (fromList [])))) = error
violating kmeans1's refinement type
Concrete

kmeans 5 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (fromList []))))) = error
violating kmeans1's refinement type
Concrete

kmeans 6 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (f (fromList [])))))) = error
violating kmeans1's refinement type
Concrete

kmeans 7 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (f (f (fromList []))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 8 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (f (f (f (fromList [])))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 9 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (f (f (f (f (fromList []))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 10 1 0 (Emp :+: Emp) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: Emp) (f (f (f (f (f (f (f (f (f (fromList [])))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 1 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
violating kmeans1's refinement type
Concrete

kmeans 2 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (fromList [])) = error
violating kmeans1's refinement type
Concrete

kmeans 3 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (fromList []))) = error
violating kmeans1's refinement type
Concrete

kmeans 4 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (fromList [])))) = error
violating kmeans1's refinement type
Concrete

kmeans 5 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (f (fromList []))))) = error
violating kmeans1's refinement type
Concrete

kmeans 6 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (f (f (fromList [])))))) = error
violating kmeans1's refinement type
Concrete

kmeans 7 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (f (f (f (fromList []))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 8 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (f (f (f (f (fromList [])))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 9 1 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (f (f (f (f (f (f (f (f (fromList []))))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
violating kmeans1's refinement type
Concrete

kmeans 2 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (fromList [])) = error
violating kmeans1's refinement type
Concrete

kmeans 3 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (f (fromList []))) = error
violating kmeans1's refinement type
Concrete

kmeans 4 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (f (f (fromList [])))) = error
violating kmeans1's refinement type
Concrete

kmeans 5 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (f (f (f (fromList []))))) = error
violating kmeans1's refinement type
Concrete

kmeans 6 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (f (f (f (f (fromList [])))))) = error
violating kmeans1's refinement type
Concrete

kmeans 7 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
makes a call to
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (f (f (f (f (f (f (fromList []))))))) = error
violating kmeans1's refinement type
Concrete

kmeans 1 1 0 (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) (fromList []) = error
makes a call to
Timeout!

ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 6,Just 7,Just 142,Just 143]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T18.09.32.lhs:166:23-51: Error: Liquid Type Mismatch
 
 166 | kmeans steps k n ps = repeat steps (kmeans1 k n ps)
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : Int
  
   not a subtype of Required type
     VV : {VV : Int | 0 <= VV
                      && VV < k}
  
   In Context
     k : {k : Int | k > 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T18.09.32.lhs:191:32-45: Error: Liquid Type Mismatch
 
 191 |     fm p          = singleton (nearest k n cs p, (1 :: Int, p))
                                      ^^^^^^^^^^^^^^
 
   Inferred type
     VV : Int
  
   not a subtype of Required type
     VV : {VV : Int | 0 <= VV
                      && VV < k}
  
   In Context
     k : {k : Int | k > 0}
