1353
KMeans.lhs-2015-03-15T05.52.08.lhs
(184, '21-41')
kmeans1
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T05.52.08.lhs:184:21-41: Error: Liquid Type Mismatch', ' 184 | kmeans1 k n ps cs = normalize newClusters']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mThe call
kmeans1 0 0 Emp (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 0 (Emp :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 0 (Emp :+: (Emp :+: Emp)) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 0 (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 0 (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: (((0.0) :+: Emp) :+: Emp)) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 1 (((0.0) :+: Emp) :+: (((0.0) :+: Emp) :+: (((0.0) :+: Emp) :+: Emp))) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 2 (((0.0) :+: ((0.0) :+: Emp)) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 2 (((0.0) :+: ((0.0) :+: Emp)) :+: (((0.0) :+: ((0.0) :+: Emp)) :+: Emp)) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 3 (((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 3 (((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))) :+: (((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))) :+: Emp)) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 4 (((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 5 (((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 6 (((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 7 (((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 0 8 (((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))) :+: Emp) (fromList []) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 Emp (fromList ([(0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 (Emp :+: Emp) (fromList ([(0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (fromList ([(0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 (Emp :+: (Emp :+: (Emp :+: Emp))) (fromList ([(0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 Emp (fromList ([(0, Emp), (0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 (Emp :+: Emp) (fromList ([(0, Emp), (0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 (Emp :+: (Emp :+: Emp)) (fromList ([(0, Emp), (0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 0 Emp (fromList ([(0, Emp), (0, Emp), (0, Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 Emp (fromList ([(0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 (((0.0) :+: Emp) :+: Emp) (fromList ([(0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 (((0.0) :+: Emp) :+: (((0.0) :+: Emp) :+: Emp)) (fromList ([(0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 Emp (fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 (((0.0) :+: Emp) :+: Emp) (fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 1 Emp (fromList ([(0, (0.0) :+: Emp), (0, (0.0) :+: Emp), (0, (0.0) :+: Emp)])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 2 Emp (fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 2 (((0.0) :+: ((0.0) :+: Emp)) :+: Emp) (fromList ([(0, (0.0) :+: ((0.0) :+: Emp))])) = error
violates kmeans1's refinement type
Concrete

The call
kmeans1 1 2 Emp (fromList ([(0, (0.0) :+: ((0.0) :+: Emp)), (0, (0.0) :+: ((0.0) :+: Emp))])) = error
violates kmeans1's refinement type
Concrete

Timeout!

ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0munknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "n##and3"
[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 33,Just 41,Just 138,Just 365]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T05.52.08.lhs:148:30-42: Error: Liquid Type Mismatch
 
 148 | centroid n p sz = map (\x -> x `divide` sz) p
                                    ^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Int | VV == sz}
  
   not a subtype of Required type
     VV : {VV : Int | VV /= 0}
  
   In Context
     sz : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T05.52.08.lhs:184:21-41: Error: Liquid Type Mismatch
 
 184 | kmeans1 k n ps cs = normalize newClusters
                           ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : (Int, (List Double))
  
   not a subtype of Required type
     VV : {VV : (Int, (List Double)) | size (snd VV) == n}
  
   In Context
     n : {n : Int | n >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T05.52.08.lhs:187:21-55: Error: Liquid Type Mismatch
 
 187 |     normalize     = M.map (\(sz, p) -> centroid n p sz)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-15T05.52.08.lhs:190:21-42: Error: Liquid Type Mismatch
 
 190 |     fr wp1 wp2    = mergeCluster n wp1 wp2
                           ^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (Int, (List Double)) | VV == wp2}
  
   not a subtype of Required type
     VV : {VV : (Int, (List Double)) | size (snd wp1) == size (snd VV)}
  
   In Context
     wp2 : (Int, (List Double))
      
     wp1 : (Int, (List Double))
