2114
flycheck_List.lhs-2015-03-16T23.41.23.lhs
(221, '13-29')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.41.23.lhs:221:13-29: Error: Liquid Type Mismatch', ' 221 | concat zs = foldr join Emp zs']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat (Emp :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = Emp
violating concat's refinement type
Concrete

concat (Emp :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
Concrete

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
Concrete


liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-16T23.41.23.lhs:143:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜replicateâ€™: replicate 0 _ = ...

liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-16T23.41.23.lhs:143:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜replicateâ€™: replicate 0 _ = ...

time = 10.000330448150635

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 336,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.41.23.lhs:221:13-29: Error: Liquid Type Mismatch
 
 221 | concat zs = foldr join Emp zs
                   ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size zs}
  
   In Context
     zs : {zs : (List (List a)) | 0 <= size zs}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.41.23.lhs:223:24-47: Error: Liquid Type Mismatch
 
 223 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?e}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : (List (List Int)) | size ?g == 1 + size ?f
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?g
                                    && 0 <= size v}
      
     ?f : {?f : (List (List Int)) | size ?f == 1 + size ?d
                                    && 0 <= size ?f}
      
     ?c : {?c : Int | ?c == (6 : int)}
      
     ?h : {?h : (List Int) | size ?h == size xss
                             && 0 <= size ?h}
      
     ?e : {?e : Bool | Prop ?e <=> ?a == ?c}
      
     ?b : {?b : (List (List Int)) | size ?b == 0
                                    && 0 <= size ?b}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?b
                                    && 0 <= size ?d}
      
     ?a : {?a : Int | ?a == size ?h}
