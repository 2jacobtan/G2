11119
flycheck_MapReduce.lhs-2015-03-16T17.18.13.lhs
(52, '15-31')
expand
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T17.18.13.lhs:52:15-31: Error: Liquid Type Mismatch', ' 52 | expand f xs = concat (map f xs)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mexpand undefined (0 :+: Emp) = Emp
makes a call to
expand (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (0 :+: Emp) = Emp
violating expand's refinement type
when
map (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? undefined (0 :+: Emp) = Emp :+: Emp
Strengthen the refinement type of map to eliminate this possibility
Abstract

expand undefined (0 :+: (0 :+: Emp)) = Emp
makes a call to
expand (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) undefined (0 :+: (0 :+: Emp)) = Emp
violating expand's refinement type
when
map (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? undefined (0 :+: (0 :+: Emp)) = Emp :+: (Emp :+: Emp)
Strengthen the refinement type of map to eliminate this possibility
Abstract


time = 11.077764749526978

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 8,Just 10,Just 13]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T17.18.13.lhs:30:13-29: Error: Liquid Type Mismatch
 
 30 |     kvs   = expand      fm xs     -- step 1
                  ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | VV == xs
                           && 0 <= size VV
                           && 0 <= sizes VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV > 0}
  
   In Context
     xs : {v : (List a) | 0 <= size v
                          && 0 <= sizes v}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T17.18.13.lhs:30:25-26: Error: Liquid Type Mismatch
 
 30 |     kvs   = expand      fm xs     -- step 1
                              ^^
 
   Inferred type
     VV : {VV : (List (a, b)) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (a, b)) | size VV > 0}
  
   In Context


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_MapReduce.lhs-2015-03-16T17.18.13.lhs:52:15-31: Error: Liquid Type Mismatch
 
 52 | expand f xs = concat (map f xs)
                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List (a, b)) | size VV == sizes ?a
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List (a, b)) | size VV > 0}
  
   In Context
     xs : {v : (List a) | size v > 0
                          && 0 <= size v
                          && 0 <= sizes v}
      
     ?a : {?a : (List (List (a, b))) | size ?a == size xs
                                       && 0 <= size ?a
                                       && 0 <= sizes ?a}
