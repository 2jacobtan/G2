4982
flycheck_List.lhs-2015-03-21T04.07.30.lhs
(202, '40-60')
zipWith
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-21T04.07.30.lhs:202:40-60: Error: Liquid Type Mismatch', ' 202 | zipWith f _          _          = die  "Bad call to zipWith"']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mzipWith undefined (0 :+: Emp) Emp = error
makes a call to
die fs? fs? = error
violating die's refinement type
Concrete

zipWith undefined Emp (undefined :+: Emp) = error
makes a call to
die fs? fs? = error
violating die's refinement type
Concrete

zipWith remInt (0 :+: Emp) (0 :+: (undefined :+: Emp)) = error
makes a call to
die (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith seq (0 :+: Emp) (0 :+: (undefined :+: Emp)) = error
makes a call to
die (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith timesInt (0 :+: Emp) (1 :+: (undefined :+: Emp)) = error
makes a call to
die (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith divInt (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = error
makes a call to
die (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) ("Bad call to zipWith") = error
violating die's refinement type
Concrete

zipWith remInt (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
die (lhList (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt)) ("Bad call to zipWith") = error
violating die's refinement type
Concrete


time = 10.260411262512207

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 274,Just 347,Just 348]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-21T04.07.30.lhs:202:40-60: Error: Liquid Type Mismatch
 
 202 | zipWith f _          _          = die  "Bad call to zipWith"
                                              ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "Bad call to zipWith"
                        && strLen ?b == 19}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-21T04.07.30.lhs:205:28-50: Error: Liquid Type Mismatch
 
 205 | prop_zipWith xs = lAssert (length xs == length x2s)
                                  ^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?a}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ?c : {?c : Int | ?c == size xs}
      
     ?b : {?b : Int | ?b == size x2s}
      
     ?a : {?a : Bool | Prop ?a <=> ?c == ?b}
      
     x2s : {v : (List a) | 0 <= size v}
