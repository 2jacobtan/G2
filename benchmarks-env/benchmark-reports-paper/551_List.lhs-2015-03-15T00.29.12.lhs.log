551
List.lhs-2015-03-15T00.29.12.lhs
(195, '45-59')
zipWith
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T00.29.12.lhs:195:45-59: Error: Liquid Type Mismatch', ' 195 | zipWith f (x :+: xs) (y :+: ys) = f x y :+: zipWith f xs ys']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mzipWith remInt (0 :+: Emp) (0 :+: (0 :+: Emp)) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) remInt Emp (0 :+: Emp) = error
violating zipWith's refinement type
Concrete

zipWith seq (0 :+: Emp) (0 :+: (0 :+: Emp)) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) seq Emp (0 :+: Emp) = error
violating zipWith's refinement type
Concrete

zipWith timesInt (0 :+: Emp) (1 :+: (0 :+: Emp)) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) timesInt Emp (0 :+: Emp) = error
violating zipWith's refinement type
Concrete

zipWith remInt (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) remInt Emp (0 :+: (0 :+: Emp)) = error
violating zipWith's refinement type
Concrete

zipWith remInt (0 :+: (0 :+: Emp)) (0 :+: Emp) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) remInt (0 :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

zipWith seq (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) seq Emp (0 :+: (0 :+: Emp)) = error
violating zipWith's refinement type
Concrete

zipWith seq (0 :+: (0 :+: Emp)) (0 :+: Emp) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) seq (0 :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

zipWith timesInt (0 :+: Emp) (1 :+: (0 :+: (0 :+: Emp))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) timesInt Emp (0 :+: (0 :+: Emp)) = error
violating zipWith's refinement type
Concrete

zipWith timesInt (0 :+: (0 :+: Emp)) (1 :+: Emp) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) timesInt (0 :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

zipWith remInt (0 :+: Emp) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) remInt Emp (0 :+: (0 :+: (0 :+: Emp))) = error
violating zipWith's refinement type
Concrete

zipWith seq (0 :+: Emp) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) seq Emp (0 :+: (0 :+: (0 :+: Emp))) = error
violating zipWith's refinement type
Concrete

zipWith timesInt (0 :+: Emp) (1 :+: (0 :+: (0 :+: (0 :+: Emp)))) = error
makes a call to
zipWith (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) timesInt Emp (0 :+: (0 :+: (0 :+: Emp))) = error
violating zipWith's refinement type
Concrete


time = 22.87714433670044

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 274,Just 354,Just 345,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T00.29.12.lhs:195:45-59: Error: Liquid Type Mismatch
 
 195 | zipWith f (x :+: xs) (y :+: ys) = f x y :+: zipWith f xs ys
                                                   ^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | VV == ys
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | (size xs == 0
                            && size VV == 0)
                           || (size xs /= 0
                               && size VV /= 0)}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ys : {ys : (List a) | 0 <= size ys}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T00.29.12.lhs:199:28-50: Error: Liquid Type Mismatch
 
 199 | prop_zipWith xs = lAssert (length xs == length x2s)
                                  ^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ?c : {?c : Bool | Prop ?c <=> ?a == ?b}
      
     ?b : {?b : Int | size x2s == ?b}
      
     ?a : {?a : Int | size xs == ?a}
      
     x2s : {v : (List a) | 0 <= size v}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T00.29.12.lhs:215:16-23: Error: Liquid Type Mismatch
 
 215 | concat = fixme "concat"
                      ^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "concat"
                        && strLen ?b == 6}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T00.29.12.lhs:217:24-47: Error: Liquid Type Mismatch
 
 217 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?a}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Int | size ?b == ?c}
      
     ?b : {?b : (List Int) | 0 <= size ?b}
      
     ?d : {?d : Int | ?d == (6 : int)}
      
     ?a : {?a : Bool | Prop ?a <=> ?c == ?d}
