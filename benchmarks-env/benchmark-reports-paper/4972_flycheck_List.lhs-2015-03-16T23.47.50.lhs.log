4972
flycheck_List.lhs-2015-03-16T23.47.50.lhs
(222, '21-40')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.47.50.lhs:222:21-40: Error: Liquid Type Mismatch', ' 222 | concat (x :+: xs) = x `join` (concat xs)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat (Emp :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = Emp
violating concat's refinement type
Concrete

concat (Emp :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = Emp
violating concat's refinement type
Concrete


liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-16T23.47.50.lhs:143:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜replicateâ€™: replicate 0 _ = ...

liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-16T23.47.50.lhs:143:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜replicateâ€™: replicate 0 _ = ...

time = 6.935953140258789

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 252,Just 351]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.47.50.lhs:222:21-40: Error: Liquid Type Mismatch
 
 222 | concat (x :+: xs) = x `join` (concat xs)
                           ^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == size x + size ?b
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size ?a}
  
   In Context
     xs : {v : (List (List a)) | 0 <= size v}
      
     ?b : {?b : (List a) | size ?b == size xs
                           && 0 <= size ?b}
      
     x : {v : (List a) | 0 <= size v}
      
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T23.47.50.lhs:224:24-47: Error: Liquid Type Mismatch
 
 224 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?g}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : Bool | Prop ?g <=> ?e == ?h}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?a
                                    && 0 <= size v}
      
     ?f : {?f : (List Int) | size ?f == size xss
                             && 0 <= size ?f}
      
     ?c : {?c : (List (List Int)) | size ?c == 1 + size ?d
                                    && 0 <= size ?c}
      
     ?h : {?h : Int | ?h == (6 : int)}
      
     ?e : {?e : Int | ?e == size ?f}
      
     ?b : {?b : (List (List Int)) | size ?b == 0
                                    && 0 <= size ?b}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?b
                                    && 0 <= size ?d}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?c
                                    && 0 <= size ?a}
