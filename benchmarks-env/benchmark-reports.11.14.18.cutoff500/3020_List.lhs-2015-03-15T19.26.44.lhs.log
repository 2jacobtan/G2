3020
List.lhs-2015-03-15T19.26.44.lhs
(220, '10-23')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T19.26.44.lhs:220:10-23: Error: Liquid Type Mismatch', ' 220 | concat = foldr addl Emp']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat Emp = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? Emp = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat Emp = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat Emp = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? Emp = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat Emp = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
violating concat's refinement type
when
foldr fs? fs? fs? fs? Emp = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat Emp = 0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp = 0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))
violating concat's refinement type
when
foldr fs? fs? fs? fs? Emp = 0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) :+: Emp) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) :+: Emp) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) :+: Emp) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) :+: Emp) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: Emp) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = 0 :+: Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp) = 0 :+: Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? Emp) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? Emp) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (foldr fs? fs? ds fs? ((0 :+: Emp) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (foldr fs? fs? ds fs? (Emp :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (foldr fs? fs? ds fs? ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
violating concat's refinement type
when
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (foldr fs? fs? ds fs? ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
Strengthen the refinement type of addl to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: (0 :+: Emp)))
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
foldr fs? fs? fs? fs? (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
Strengthen the refinement type of foldr to eliminate this possibility
Abstract

Timeout!

time = 120.18545365333557

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 342]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T19.26.44.lhs:220:10-23: Error: Liquid Type Mismatch
 
 220 | concat = foldr addl Emp
                ^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == si ?a}
  
   In Context
     ?a : {?a : (List (List a)) | 0 <= size ?a}
