8687
List.lhs-2015-03-19T01.58.06.lhs
(229, '24-47')
prop_concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.58.06.lhs:229:24-47: Error: Liquid Type Mismatch', ' 229 | prop_concat = lAssert (length (concat xss) == 6)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mprop_concat = error
makes a call to
die (lh lhEqBool lhNeBool lhLtBool lhLeBool lhGtBool lhGeBool lhPPBool) ("Assert Fails!") = error
violating die's refinement type
when
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (l1 :+: (l2 :+: (l3 :+: Emp)))) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of concat to eliminate this possibility
Abstract


time = 7.060433864593506

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 340,Just 345,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.58.06.lhs:223:16-32: Error: Liquid Type Mismatch
 
 223 | append xs ys = foldr (:+:) ys xs
                      ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size xs + size ys}
  
   In Context
     xs : {v : (List a) | 0 <= size v}
      
     ys : {ys : (List a) | 0 <= size ys}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.58.06.lhs:227:21-40: Error: Liquid Type Mismatch
 
 227 | concat (x :+: xs) = append x (concat xs)
                           ^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == size x + size ?a
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sizes ?b}
  
   In Context
     xs : {v : (List (List a)) | 0 <= size v}
      
     ?b : {?b : (List (List a)) | 0 <= size ?b}
      
     x : {v : (List a) | 0 <= size v}
      
     ?a : {?a : (List a) | size ?a == sizes xs
                           && 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T01.58.06.lhs:229:24-47: Error: Liquid Type Mismatch
 
 229 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : (List (List Int)) | size ?g == 1 + size ?b
                                    && sizes ?g == size List.l2 + size ?b
                                    && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?f
                                    && sizes v == size List.l0 + size ?f
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : (List (List Int)) | size ?f == 1 + size ?g
                                    && sizes ?f == size List.l1 + size ?g
                                    && 0 <= size ?f}
      
     ?c : {?c : Bool | Prop ?c <=> ?h == ?e}
      
     ?h : {?h : Int | ?h == size ?a}
      
     ?e : {?e : Int | ?e == (6 : int)}
      
     ?b : {?b : (List (List Int)) | size ?b == 1 + size ?d
                                    && sizes ?b == size List.l3 + size ?d
                                    && 0 <= size ?b}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : (List (List Int)) | size ?d == 0
                                    && sizes ?d == 0
                                    && 0 <= size ?d}
      
     ?a : {?a : (List Int) | size ?a == sizes xss
                             && 0 <= size ?a}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
