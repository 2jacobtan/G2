1682
List.lhs-2015-03-15T03.51.18.lhs
(218, '1-4')
addl
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T03.51.18.lhs:218:1-4: Error: Liquid Type Mismatch', ' 218 | addl empty xs = xs']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0maddl (0 :+: Emp) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: Emp)) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: Emp))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: Emp) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: Emp)) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: Emp) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: Emp) = 0 :+: Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) (0 :+: Emp) = 0 :+: Emp
violating addl's refinement type
Concrete

addl (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = 0 :+: (0 :+: (0 :+: Emp))
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) Emp = Emp
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))))))) Emp = Emp
violating addl's refinement type
Concrete

addl (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
addl (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: Emp)) = 0 :+: (0 :+: Emp)
violating addl's refinement type
Concrete


liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T03.51.18.lhs:219:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜addlâ€™: addl (x :+: xs) ys = ...

liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-15T03.51.18.lhs:219:1: warning: [-Woverlapping-patterns]
    Pattern match is redundant
    In an equation for â€˜addlâ€™: addl (x :+: xs) ys = ...

time = 9.13976263999939

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 364,Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T03.51.18.lhs:218:1-4: Error: Liquid Type Mismatch
 
 218 | addl empty xs = xs
       ^^^^
 
   Inferred type
     VV : {VV : (List a) | VV == xs
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == size empty + size xs}
  
   In Context
     empty : {empty : (List a) | 0 <= size empty}
      
     xs : {v : (List a) | 0 <= size v}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-15T03.51.18.lhs:221:24-47: Error: Liquid Type Mismatch
 
 221 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Bool | Prop ?c <=> ?b == ?a}
      
     ?b : {?b : Int | ?b == size ?d}
      
     ?d : {?d : (List Int) | 0 <= size ?d}
      
     ?a : {?a : Int | ?a == (6 : int)}
