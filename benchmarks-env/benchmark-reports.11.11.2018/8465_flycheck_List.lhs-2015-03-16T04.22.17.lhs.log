8465
flycheck_List.lhs-2015-03-16T04.22.17.lhs
(226, '24-47')
prop_concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.22.17.lhs:226:24-47: Error: Liquid Type Mismatch', ' 226 | prop_concat = lAssert (length (concat xss) == 6)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mprop_concat = error
makes a call to
die (lh lhEqBool lhNeBool lhLtBool lhLeBool lhGtBool lhGeBool lhPPBool) ("Assert Fails!") = error
violating die's refinement type
when
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((1 :+: Emp) :+: ((2 :+: (1 :+: Emp)) :+: ((3 :+: (2 :+: (1 :+: Emp))) :+: Emp)))) = Emp
Strengthen the refinement type of concat to eliminate this possibility
Abstract

prop_concat = error
makes a call to
die (lh lhEqBool lhNeBool lhLtBool lhLeBool lhGtBool lhGeBool lhPPBool) ("Assert Fails!") = error
violating die's refinement type
when
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((1 :+: Emp) :+: ((2 :+: (1 :+: Emp)) :+: ((3 :+: (2 :+: (1 :+: Emp))) :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of concat to eliminate this possibility
Abstract


ERROR:

37.1268789768219

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 252]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-16T04.22.17.lhs:226:24-47: Error: Liquid Type Mismatch
 
 226 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?b}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     List.l2 : {List.l2 : (List Int) | size List.l2 == 2
                                       && 0 <= size List.l2}
      
     ?g : {?g : Int | ?g >= 0
                      && ?g == size ?c}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?d
                                    && sizeXs v == size List.l0 + sizeXs ?d
                                    && 0 <= size v}
      
     List.l3 : {List.l3 : (List Int) | size List.l3 == 3
                                       && 0 <= size List.l3}
      
     ?f : {?f : Int | ?f == (6 : int)}
      
     ?c : {?c : (List Int) | (size ?c == sizeXs xss
                              && size ?c > 0 => sizeXs xss > 0)
                             && 0 <= size ?c}
      
     ?h : {?h : (List (List Int)) | size ?h == 1 + size ?a
                                    && sizeXs ?h == size List.l2 + sizeXs ?a
                                    && 0 <= size ?h}
      
     ?e : {?e : (List (List Int)) | size ?e == 0
                                    && sizeXs ?e == 0
                                    && 0 <= size ?e}
      
     ?b : {?b : Bool | Prop ?b <=> ?g == ?f}
      
     List.l0 : {List.l0 : (List Int) | size List.l0 == 0
                                       && 0 <= size List.l0}
      
     ?d : {?d : (List (List Int)) | size ?d == 1 + size ?h
                                    && sizeXs ?d == size List.l1 + sizeXs ?h
                                    && 0 <= size ?d}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?e
                                    && sizeXs ?a == size List.l3 + sizeXs ?e
                                    && 0 <= size ?a}
      
     List.l1 : {List.l1 : (List Int) | size List.l1 == 1
                                       && 0 <= size List.l1}
