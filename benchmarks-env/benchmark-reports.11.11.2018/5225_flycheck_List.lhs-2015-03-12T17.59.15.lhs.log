5225
flycheck_List.lhs-2015-03-12T17.59.15.lhs
(164, '26-55')
prop_map
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:164:26-55: Error: Liquid Type Mismatch', ' 164 | prop_map f xs = lAssert (length xs == length (map f xs))']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0m
ERROR:
G2: Unrecognized Data (DataCon (Name "$CNum" (Just "GHC.Num") 0 (Just (Span {start = Loc {line = 33, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 58, col = 56, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)))) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)))) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)))) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))) (TyFun (TyFun (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))) (TyFun (TyFun (TyCon (Name "Integer" (Just "GHC.Integer.Type") 8214565720323799830 Nothing) TYPE) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))) (TyFun (TyApp (TyCon (Name "Ord" (Just "GHC.Classes") 8214565720323799700 (Just (Span {start = Loc {line = 197, col = 1, file = "../../base-4.9.1.0/GHC/Classes2.hs"}, end = Loc {line = 218, col = 35, file = "../../base-4.9.1.0/GHC/Classes2.hs"}}))) TYPE) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))) (TyApp (TyCon (Name "Num" (Just "GHC.Num") 8214565720323800149 (Just (Span {start = Loc {line = 33, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 58, col = 56, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun TYPE (TyCon (Name "Constraint" (Just "GHC.Types") 3674937295934324920 Nothing) TYPE))) (TyVar (Id (Name "a" Nothing 6989586621679040659 (Just (Span {start = Loc {line = 33, col = 12, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 33, col = 13, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) TYPE))))))))))))) with args [Type (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE),Var (Id (Name "plusInt" (Just "GHC.Num") 8214565720323800154 (Just (Span {start = Loc {line = 113, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 113, col = 8, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE)))),Var (Id (Name "minusInt" (Just "GHC.Num") 8214565720323800156 (Just (Span {start = Loc {line = 117, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 117, col = 9, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE)))),Var (Id (Name "timesInt" (Just "GHC.Num") 8214565720323800151 (Just (Span {start = Loc {line = 121, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 121, col = 9, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE)))),Var (Id (Name "negateInt" (Just "GHC.Num") 8214565720323800156 (Just (Span {start = Loc {line = 125, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 125, col = 10, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE))),Var (Id (Name "$cabs" Nothing 8214565720323821876 (Just (Span {start = Loc {line = 79, col = 5, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 79, col = 8, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE))),Var (Id (Name "$csignum" Nothing 8214565720323821876 (Just (Span {start = Loc {line = 84, col = 5, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 84, col = 11, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE))),Var (Id (Name "fromIntegerInt" (Just "GHC.Num") 8214565720323800158 (Just (Span {start = Loc {line = 139, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 139, col = 15, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun (TyCon (Name "Integer" (Just "GHC.Integer.Type") 8214565720323799830 Nothing) TYPE) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799605 Nothing) TYPE)))] in funcToSMT
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Solver/Converters.hs:360:17 in main:G2.Internals.Solver.Converters

8.128031730651855

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 320,Just 337,Just 274,Just 338,Just 291,Just 342,Just 328,Just 297,Just 313,Just 283,Just 315,Just 252,Just 317]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:100:23-36: Error: Liquid Type Mismatch
 
 100 | prop_size  = lAssert (length l3 == 3)
                             ^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Bool | Prop ?c <=> ?b == ?a}
      
     ?b : Int
      
     ?a : {?a : Int | ?a == (3 : int)}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:124:15-21: Error: Liquid Type Mismatch
 
 124 | empty = fixme "empty"
                     ^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "empty"
                        && strLen ?b == 5}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:127:18-22: Error: Liquid Type Mismatch
 
 127 | add x xs = fixme "add"
                        ^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "add"
                        && strLen ?b == 3}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:130:21-31: Error: Liquid Type Mismatch
 
 130 | singleton x = fixme "singleton"
                           ^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?b
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : [Char] | ?b ~~ ?a
                         && len ?b == strLen ?a
                         && len ?b >= 0}
      
     ?a : {?a : Addr# | ?a ~~ "singleton"
                        && strLen ?a == 9}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:142:19-29: Error: Liquid Type Mismatch
 
 142 | replicate = fixme "replicate"
                         ^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?b
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : [Char] | ?b ~~ ?a
                         && len ?b == strLen ?a
                         && len ?b >= 0}
      
     ?a : {?a : Addr# | ?a ~~ "replicate"
                        && strLen ?a == 9}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:149:31-57: Error: Liquid Type Mismatch
 
 149 | prop_replicate n x = lAssert (n == length (replicate n x))
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?b}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     n : {n : Int | n >= 0}
      
     ?b : {?b : Bool | Prop ?b <=> n == ?a}
      
     ?a : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:164:26-55: Error: Liquid Type Mismatch
 
 164 | prop_map f xs = lAssert (length xs == length (map f xs))
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?b}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : Int
      
     ?b : {?b : Bool | Prop ?b <=> ?c == ?a}
      
     ?a : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:176:28-63: Error: Liquid Type Mismatch
 
 176 | foldr1 op Emp        = die "Cannot call foldr1 with empty list"
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "Cannot call foldr1 with empty list"
                        && strLen ?b == 34}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:195:40-60: Error: Liquid Type Mismatch
 
 195 | zipWith f _          _          = die  "Bad call to zipWith"
                                              ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "Bad call to zipWith"
                        && strLen ?b == 19}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:198:28-50: Error: Liquid Type Mismatch
 
 198 | prop_zipWith xs = lAssert (length xs == length x2s)
                                  ^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Bool | Prop ?c <=> ?b == ?a}
      
     ?b : Int
      
     ?a : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:214:16-23: Error: Liquid Type Mismatch
 
 214 | concat = fixme "concat"
                      ^^^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "concat"
                        && strLen ?b == 6}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-12T17.59.15.lhs:216:24-47: Error: Liquid Type Mismatch
 
 216 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?c}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?c : {?c : Bool | Prop ?c <=> ?b == ?a}
      
     ?b : Int
      
     ?a : {?a : Int | ?a == (6 : int)}
