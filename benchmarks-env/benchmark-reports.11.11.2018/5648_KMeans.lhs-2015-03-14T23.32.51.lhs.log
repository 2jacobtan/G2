5648
KMeans.lhs-2015-03-14T23.32.51.lhs
(190, '21-55')
kmeans1
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-14T23.32.51.lhs:190:21-55: Error: Liquid Type Mismatch', ' 190 |     normalize     = M.map (\\(sz, p) -> centroid n p sz)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mTimeout!

ERROR:

120.33065819740295

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0munknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "k##and2"
unknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "n##and3"
unknown symbol in qualifier: "n##and3"
[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 42]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/KMeans.lhs-2015-03-14T23.32.51.lhs:190:21-55: Error: Liquid Type Mismatch
 
 190 |     normalize     = M.map (\(sz, p) -> centroid n p sz)
                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}
