7741
List.lhs-2015-03-19T05.31.06.lhs
(226, '1-6')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.31.06.lhs:226:1-6: Error: Liquid Type Mismatch', ' 226 | concat  Emp         = Emp']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mG2: exprToSMT: unhandled Expr: Lam TermL (Id (Name "d" Nothing 1 Nothing) (TyApp (TyCon (Name "lh" Nothing 0 Nothing) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))) (Lam TermL (Id (Name "fs?" Nothing 87328 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))) (Case (Var (Id (Name "fs?" Nothing 87328 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE))))) (Id (Name "fs?" Nothing 87329 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))) [Alt (DataAlt (DataCon (Name "Emp" (Just "List") 8214565720323848216 (Just (Span {start = Loc {line = 56, col = 15, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 18, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE)) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE))))) []) (App (Data (DataCon (Name "$I" (Just "GHC.Types") 0 (Just (Span {start = Loc {line = 17, col = 12, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) (TyFun TyLitInt (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799706 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))) (Lit (LitInt 0))),Alt (DataAlt (DataCon (Name "$+" (Just "List") 0 (Just (Span {start = Loc {line = 57, col = 15, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 57, col = 31, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE)) (TyFun (TyVar (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE)) (TyFun (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE))) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 6989586621679075576 (Just (Span {start = Loc {line = 56, col = 11, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 56, col = 12, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) TYPE))))))) [Id (Name "x" (Just "") 0 Nothing) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)),Id (Name "xs" (Just "") 0 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))]) (App (App (App (App (Var (Id (Name "+" (Just "GHC.Num") 8214565720323800249 (Just (Span {start = Loc {line = 36, col = 5, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 36, col = 39, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyForAll (NamedTyBndr (Id (Name "fs?" Nothing 87330 Nothing) TYPE)) (TyFun (TyApp (TyCon (Name "Num" (Just "GHC.Num") 8214565720323800250 (Just (Span {start = Loc {line = 33, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 58, col = 56, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyApp TYPE TYPE)) (TyVar (Id (Name "fs?" Nothing 87330 Nothing) TYPE))) (TyFun (TyVar (Id (Name "fs?" Nothing 87330 Nothing) TYPE)) (TyFun (TyVar (Id (Name "fs?" Nothing 87330 Nothing) TYPE)) (TyVar (Id (Name "fs?" Nothing 87330 Nothing) TYPE)))))))) (Type (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799706 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE))) (Var (Id (Name "$fNumInt" (Just "GHC.Num") 8214565720323800242 (Just (Span {start = Loc {line = 69, col = 11, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 69, col = 18, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyApp (TyCon (Name "Num" (Just "GHC.Num") 8214565720323800250 (Just (Span {start = Loc {line = 33, col = 1, file = "../../base-4.9.1.0/GHC/Num.hs"}, end = Loc {line = 58, col = 56, file = "../../base-4.9.1.0/GHC/Num.hs"}}))) (TyFun TYPE (TyCon (Name "Constraint" (Just "GHC.Types") 3674937295934324920 Nothing) TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799706 Nothing) TYPE))))) (App (Data (DataCon (Name "$I" (Just "GHC.Types") 0 (Just (Span {start = Loc {line = 17, col = 12, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) (TyFun TyLitInt (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799706 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))) (Lit (LitInt 1)))) (App (App (App (Var (Id (Name "size" (Just "") 0 Nothing) (TyForAll (NamedTyBndr (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)) (TyFun (TyApp (TyCon (Name "lh" Nothing 0 Nothing) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE))) (TyFun (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE))) (TyCon (Name "Int" (Just "GHC.Types") 8214565720323799706 (Just (Span {start = Loc {line = 17, col = 1, file = "../../base-4.9.1.0/GHC/Types2.hs"}, end = Loc {line = 17, col = 19, file = "../../base-4.9.1.0/GHC/Types2.hs"}}))) TYPE)))))) (Type (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))) (Var (Id (Name "d" Nothing 1 Nothing) (TyApp (TyCon (Name "lh" Nothing 0 Nothing) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))))) (Var (Id (Name "xs" (Just "") 0 Nothing) (TyApp (TyCon (Name "List" (Just "List") 8214565720323848122 (Just (Span {start = Loc {line = 56, col = 1, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}, end = Loc {line = 58, col = 39, file = "./liquidhaskell-study/wi15/unsafe/List.lhs-2015-03-19T05.31.06.lhs"}}))) (TyFun TYPE TYPE)) (TyVar (Id (Name "a" Nothing 8646911284551352344 Nothing) TYPE)))))))]))
CallStack (from HasCallStack):
  error, called at src/G2/Internals/Solver/Converters.hs:354:15 in main:G2.Internals.Solver.Converters

4.334916830062866

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 359,Just 252,Just 366]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.31.06.lhs:226:1-6: Error: Liquid Type Mismatch
 
 226 | concat  Emp         = Emp
       ^^^^^^
 
   Inferred type
     VV : {VV : (List a) | VV /= ?a
                           && size VV > 0
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == nestedSize ?b}
  
   In Context
     ?b : {?b : (List (List a)) | 0 <= size ?b}
      
     ?a : {?a : (List a) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.31.06.lhs:227:23-31: Error: Liquid Type Mismatch
 
 227 | concat (Emp :+: xs) = concat xs
                             ^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == nestedSize xs
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == nestedSize ?a}
  
   In Context
     xs : {v : (List (List a)) | 0 <= size v}
      
     ?a : {?a : (List (List a)) | 0 <= size ?a}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/List.lhs-2015-03-19T05.31.06.lhs:230:24-47: Error: Liquid Type Mismatch
 
 230 | prop_concat = lAssert (length (concat xss) == 6)
                              ^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Bool | VV == ?e}
  
   not a subtype of Required type
     VV : {VV : Bool | Prop VV}
  
   In Context
     ?g : {?g : (List Int) | size ?g == nestedSize xss
                             && 0 <= size ?g}
      
     xss : {v : (List (List Int)) | size v == 1 + size ?b
                                    && nestedSize v == size ?b + nestedSize ?b
                                    && 0 <= size v}
      
     ?f : {?f : (List (List Int)) | size ?f == 1 + size ?d
                                    && nestedSize ?f == size ?d + nestedSize ?d
                                    && 0 <= size ?f}
      
     ?c : {?c : Int | ?c == (6 : int)}
      
     ?h : {?h : Int | ?h == size ?g}
      
     ?e : {?e : Bool | Prop ?e <=> ?h == ?c}
      
     ?b : {?b : (List (List Int)) | size ?b == 1 + size ?a
                                    && nestedSize ?b == size ?a + nestedSize ?a
                                    && 0 <= size ?b}
      
     ?d : {?d : (List (List Int)) | size ?d == 0
                                    && nestedSize ?d == size List.Emp
                                    && 0 <= size ?d}
      
     ?a : {?a : (List (List Int)) | size ?a == 1 + size ?f
                                    && nestedSize ?a == size ?f + nestedSize ?f
                                    && 0 <= size ?a}
