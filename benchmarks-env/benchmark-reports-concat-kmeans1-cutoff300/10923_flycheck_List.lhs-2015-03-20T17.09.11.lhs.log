10923
flycheck_List.lhs-2015-03-20T17.09.11.lhs
(225, '30-60')
concat
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T17.09.11.lhs:225:30-60: Error: Liquid Type Mismatch', ' 225 | concat (xs :+: ys :+: xss) = concat ((append xs ys) :+: xss)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mconcat ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: Emp) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: Emp) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp Emp = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp)))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: (Emp :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: Emp) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: (0 :+: Emp))) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: Emp) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: Emp) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: (Emp :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: Emp)) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: (Emp :+: (Emp :+: Emp))))) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: ((0 :+: Emp) :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? (0 :+: Emp) = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: (Emp :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) Emp = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: Emp) :+: Emp)) = 0 :+: (0 :+: (0 :+: Emp))
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: Emp) = 0 :+: (0 :+: (0 :+: Emp))
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: (Emp :+: Emp)))) = 0 :+: Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) fs? Emp = 0 :+: Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: (Emp :+: (Emp :+: Emp))) = 0 :+: (0 :+: Emp)
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp Emp = 0 :+: (0 :+: Emp)
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: Emp) :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: Emp) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: Emp))) :+: ((0 :+: (0 :+: (0 :+: Emp))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: Emp))) (0 :+: (0 :+: (0 :+: Emp))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) :+: ((0 :+: Emp) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp))))) (0 :+: Emp) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: (Emp :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) Emp = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: ((0 :+: (0 :+: Emp)) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) (0 :+: (0 :+: Emp)) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) ((0 :+: (0 :+: Emp)) :+: ((0 :+: (0 :+: (0 :+: (0 :+: Emp)))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (0 :+: (0 :+: Emp)) (0 :+: (0 :+: (0 :+: (0 :+: Emp)))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract

concat (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
makes a call to
concat (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) (Emp :+: ((0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) :+: Emp)) = Emp
violating concat's refinement type
when
append (lh lhEqInt lhNeInt lhLtInt lhLeInt lhGtInt lhGeInt lhPPInt) Emp (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: (0 :+: Emp)))))) = Emp
Strengthen the refinement type of append to eliminate this possibility
Abstract


liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T17.09.11.lhs:147:1: warning: [-Wtabs]
    Tab character found here, and in one further location.
    Please use spaces instead.

liquidhaskell-study/wi15/unsafe/flycheck_List.lhs-2015-03-20T17.09.11.lhs:147:1: warning: [-Wtabs]
    Tab character found here, and in one further location.
    Please use spaces instead.

43.74802303314209

LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 359]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_List.lhs-2015-03-20T17.09.11.lhs:225:30-60: Error: Liquid Type Mismatch
 
 225 | concat (xs :+: ys :+: xss) = concat ((append xs ys) :+: xss)
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List a) | size VV == sumsize ?a
                           && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List a) | size VV == sumsize ?c}
  
   In Context
     xss : {v : (List (List a)) | 0 <= size v}
      
     ?c : {?c : (List (List a)) | 0 <= size ?c}
      
     ?b : {?b : (List a) | 0 <= size ?b}
      
     ?a : {?a : (List (List a)) | size ?a == 1 + size xss
                                  && sumsize ?a == size ?b + sumsize xss
                                  && 0 <= size ?a}
