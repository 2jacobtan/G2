2023
flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs
(135, '46-62')
mergeCluster
[' /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:135:46-62: Error: Liquid Type Mismatch', ' 135 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)']

LiquidHaskell Copyright 2013-17 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  A-Normalization ****************************************************
[0m[1;90m 
[0mmergeCluster 0 ((0, Emp)) ((0, undefined :+: Emp)) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: Emp)) ((0, (0.0) :+: (undefined :+: Emp))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: Emp))) ((0, (0.0) :+: ((0.0) :+: (undefined :+: Emp)))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: (undefined :+: Emp))))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: (undefined :+: Emp)))))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: (undefined :+: Emp))))))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: (undefined :+: Emp)))))))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: (undefined :+: Emp))))))))) = error
makes a call to
zipWith + Emp (undefined :+: Emp) = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: ((0.0) :+: Emp))))) ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: ((0.0) :+: Emp)))) ((0, (0.0) :+: ((0.0) :+: Emp))) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: ((0.0) :+: Emp))) ((0, (0.0) :+: Emp)) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete

mergeCluster 0 ((0, (0.0) :+: Emp)) ((0, Emp)) = error
makes a call to
zipWith + ((0.0) :+: Emp) Emp = error
violating zipWith's refinement type
Concrete


ERROR:


LIQUID_OUT:
LiquidHaskell Copyright 2009-15 Regents of the University of California. All Rights Reserved.

[1;94m
**** DONE:  Extracted Core using GHC *******************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  Uniqify & Rename ***************************************************
[0m[1;90m 
[0mRESULT: Unsafe [Just 164,Just 358,Just 154,Just 286,Just 31]
[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** START: pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  pandoc *************************************************************
[0m[1;90m 
[0m[1;94m
**** DONE:  annotate ***********************************************************
[0m[1;90m 
[0m[1;91m
**** RESULT: UNSAFE ************************************************************
[0m

 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:83:41-71: Error: Liquid Type Mismatch
 
 83 | distance n px py = sqrt $ foldr (+) 0 $ zipWith (\x y -> (x-y)^2) px py
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | VV == py
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == size px}
  
   In Context
     px : {px : (List Double) | 0 <= size px}
      
     py : {py : (List Double) | (size px == 0 <=> size py == 0)
                                && 0 <= size py}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:94:31-36: Error: Liquid Type Mismatch
 
 94 | nearest k n centers p = fixme "here"--centers k p
                                    ^^^^^^
 
   Inferred type
     VV : {VV : [Char] | VV == ?a
                         && len VV >= 0}
  
   not a subtype of Required type
     VV : {VV : [Char] | false}
  
   In Context
     ?b : {?b : Addr# | ?b ~~ "here"
                        && strLen ?b == 4}
      
     ?a : {?a : [Char] | ?a ~~ ?b
                         && len ?a == strLen ?b
                         && len ?a >= 0}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:135:46-62: Error: Liquid Type Mismatch
 
 135 | mergeCluster n (n1, p1) (n2, p2) = (n1 + n2, zipWith (+) p1 p2)
                                                    ^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | VV == p2
                                && 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == size p1}
  
   In Context
     p1 : {p1 : (List Double) | 0 <= size p1}
      
     p2 : {p2 : (List Double) | 0 <= size p2}


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:149:30-42: Error: Liquid Type Mismatch
 
 149 | centroid n p sz = map (\x -> x `divide` sz) p
                                    ^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : Int | VV == sz}
  
   not a subtype of Required type
     VV : {VV : Int | VV /= 0}
  
   In Context
     sz : Int


 /home/gridaphobe/src/liquidhaskell/benchmarks/ucsd/wi15/final/liquid-cache/flycheck_KMeans.lhs-2015-03-21T02.22.20.lhs:187:21-41: Error: Liquid Type Mismatch
 
 187 | kmeans1 k n ps cs = normalize newClusters
                           ^^^^^^^^^^^^^^^^^^^^^
 
   Inferred type
     VV : {VV : (List Double) | 0 <= size VV}
  
   not a subtype of Required type
     VV : {VV : (List Double) | size VV == n}
  
   In Context
     n : {n : Int | n >= 0}
